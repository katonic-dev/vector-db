# Source: mongodb/templates/arbiter/headless-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: mongo-db-mongodb-arbiter-headless
  namespace: "application"
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-12.1.15
    app.kubernetes.io/instance: mongo-db
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: arbiter
    platform-compopnent: mongo-db-mongodb
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-mongodb
      port: 27017
      targetPort: mongodb
  selector:
    app.kubernetes.io/name: mongodb
    app.kubernetes.io/instance: mongo-db
    app.kubernetes.io/component: arbiter
---
# Source: mongodb/templates/replicaset/headless-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: mongo-db-mongodb-headless
  namespace: "application"
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-12.1.15
    app.kubernetes.io/instance: mongo-db
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: mongodb
    platform-compopnent: mongo-db-mongodb
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: "mongodb"
      port: 27017
      targetPort: mongodb
  selector:
    app.kubernetes.io/name: mongodb
    app.kubernetes.io/instance: mongo-db
    app.kubernetes.io/component: mongodb
---
# Source: mongodb/templates/arbiter/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongo-db-mongodb-arbiter
  namespace: "application"
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-12.1.15
    app.kubernetes.io/instance: mongo-db
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: arbiter
    platform-compopnent: mongo-db-mongodb
spec:
  serviceName: mongo-db-mongodb-arbiter-headless
  podManagementPolicy: OrderedReady
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: mongodb
      app.kubernetes.io/instance: mongo-db
      app.kubernetes.io/component: arbiter
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mongodb
        helm.sh/chart: mongodb-12.1.15
        app.kubernetes.io/instance: mongo-db
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: arbiter
        platform-compopnent: mongo-db-mongodb
    spec:
      serviceAccountName: mongo-db-mongodb
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: katonic.ai/node-pool
                operator: In
                values:
                - platform
      tolerations:
        - effect: NoSchedule
          key: katonic.ai/node-pool
          operator: Equal
          value: platform
      securityContext:
        fsGroup: 1001
        sysctls: []
      priorityClassName: mongo-db-high-priority
      initContainers:
      containers:
        - name: mongodb-arbiter
          image: quay.io/katonic/mongo:mongodb
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: K8S_SERVICE_NAME
              value: "mongo-db-mongodb-arbiter-headless"
            - name: MONGODB_REPLICA_SET_MODE
              value: "arbiter"
            - name: MONGODB_INITIAL_PRIMARY_HOST
              value: mongo-db-mongodb-0.mongo-db-mongodb-headless.$(MY_POD_NAMESPACE).svc.cluster.local
            - name: MONGODB_REPLICA_SET_NAME
              value: "rs0"
            - name: MONGODB_ADVERTISED_HOSTNAME
              value: "$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
            - name: MONGODB_PORT_NUMBER
              value: "27017"
            - name: MONGODB_INITIAL_PRIMARY_ROOT_USER
              value: "root"
            - name: MONGODB_INITIAL_PRIMARY_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mongo-db-mongodb
                  key: mongodb-root-password
            - name: MONGODB_REPLICA_SET_KEY
              valueFrom:
                secretKeyRef:
                  name: mongo-db-mongodb
                  key: mongodb-replica-set-key
            - name: ALLOW_EMPTY_PASSWORD
              value: "no"
          ports:
            - containerPort: 27017
              name: mongodb
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 10
            tcpSocket:
              port: mongodb
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 10
            tcpSocket:
              port: mongodb
          resources:
            limits: {}
            requests: {}
---
# Source: mongodb/templates/replicaset/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongo-db-mongodb
  namespace: "application"
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-12.1.15
    app.kubernetes.io/instance: mongo-db
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: mongodb
    platform-compopnent: mongo-db-mongodb
spec:
  serviceName: mongo-db-mongodb-headless
  podManagementPolicy: OrderedReady
  replicas: mongo-db-mongodb-replicas
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: mongodb
      app.kubernetes.io/instance: mongo-db
      app.kubernetes.io/component: mongodb
  template:
    metadata:
      annotations:
        backup.velero.io/backup-volumes: datadir
      labels:
        app.kubernetes.io/name: mongodb
        helm.sh/chart: mongodb-12.1.15
        app.kubernetes.io/instance: mongo-db
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: mongodb
        platform-compopnent: mongo-db-mongodb
    spec:
      serviceAccountName: mongo-db-mongodb
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: katonic.ai/node-pool
                operator: In
                values:
                - platform
      tolerations:
        - effect: NoSchedule
          key: katonic.ai/node-pool
          operator: Equal
          value: platform
      securityContext:
        fsGroup: 1001
        sysctls: []
      priorityClassName: mongo-db-high-priority
      initContainers:
        - name: volume-permissions
          image: quay.io/katonic/onprem-db-bitnami-shell:11-debian-11-r24
          imagePullPolicy: "IfNotPresent"
          command:
            - /bin/bash
          args:
            - -ec
            - |
              mkdir -p /bitnami/mongodb/
              chown 1001:1001 /bitnami/mongodb/
              find  /bitnami/mongodb/ -mindepth 1 -maxdepth 1 -not -name ".snapshot" -not -name "lost+found" | xargs -r chown -R 1001:1001
          securityContext:
            runAsUser: 0
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: datadir
              mountPath: /bitnami/mongodb
      containers:
        - name: mongodb
          image: quay.io/katonic/mongo:mongodb
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          command:
            - /scripts/setup.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: MY_POD_HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: K8S_SERVICE_NAME
              value: "mongo-db-mongodb-headless"
            - name: MONGODB_INITIAL_PRIMARY_HOST
              value: mongo-db-mongodb-0.$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local
            - name: MONGODB_REPLICA_SET_NAME
              value: "rs0"
            - name: MONGODB_ADVERTISED_HOSTNAME
              value: "$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
            - name: MONGODB_ROOT_USER
              value: "root"
            - name: MONGODB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mongo-db-mongodb
                  key: mongodb-root-password
            - name: MONGODB_REPLICA_SET_KEY
              valueFrom:
                secretKeyRef:
                  name: mongo-db-mongodb
                  key: mongodb-replica-set-key
            - name: ALLOW_EMPTY_PASSWORD
              value: "no"
            - name: MONGODB_SYSTEM_LOG_VERBOSITY
              value: "0"
            - name: MONGODB_DISABLE_SYSTEM_LOG
              value: "no"
            - name: MONGODB_DISABLE_JAVASCRIPT
              value: "no"
            - name: MONGODB_ENABLE_JOURNAL
              value: "yes"
            - name: MONGODB_PORT_NUMBER
              value: "27017"
            - name: MONGODB_ENABLE_IPV6
              value: "no"
            - name: MONGODB_ENABLE_DIRECTORY_PER_DB
              value: "no"
          ports:
            - name: mongodb
              containerPort: 27017
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 10
            exec:
              command:
                - /bitnami/scripts/ping-mongodb.sh
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bitnami/scripts/readiness-probe.sh
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: datadir
              mountPath: /bitnami/mongodb
              subPath: 
            - name: common-scripts
              mountPath: /bitnami/scripts
            - name: scripts
              mountPath: /scripts/setup.sh
              subPath: setup.sh
            
      volumes:
        - name: common-scripts
          configMap:
            name: mongo-db-mongodb-common-scripts
            defaultMode: 0550
        - name: scripts
          configMap:
            name: mongo-db-mongodb-scripts
            defaultMode: 0755
  volumeClaimTemplates:
    - metadata:
        name: datadir
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"